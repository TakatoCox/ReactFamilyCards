{"version":3,"sources":["components/WeatherCard/Location.js","components/WeatherCard/Condition.js","components/WeatherCard/Icon.js","components/WeatherCard/Time.js","components/WeatherCard/component.js","components/WeatherEngine.js","App.js","serviceWorker.js","index.js"],"names":["Location","city","country","Container","styled","div","City","h1","Country","h3","Condition","temp","condition","tempColor","Temp","State","Icon","props","img","icon","src","alt","Time","_isMounted","state","timeZone","hours","minutes","seconds","currSeconds","Date","getSeconds","currMinutes","getMinutes","currHours","getHours","this","setState","timeDiff","time","setInterval","currentTime","className","Component","WeatherCard","name","highColor","lowColor","bg","Card","Title","WeatherEngine","location","useState","weather","setWeather","getWeather","q","a","fetch","apiRes","json","resJSON","main","sys","timezone","useEffect","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf679490.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from '@emotion/styled';\r\n\r\n\r\nconst Location = ({city, country}) => {\r\n\r\nconst Container = styled.div`\r\ntext-align: center;\r\ndisplay:flex;\r\nflex-direction: row;\r\nmargin-top:-2vh;\r\n`\r\nconst City = styled.h1`\r\nfont-family: 'Merriweather', sans-serif;\r\nfont-size: 1.6rem;\r\nmargin-bottom:0;\r\ncolor:white;\r\n@media(max-width: 700px){\r\n        font-size:1.2rem;\r\n    }\r\n`\r\n\r\nconst Country = styled.h3`\r\nfont-family: 'Fira Sans', sans-serif;\r\nfont-size: 1.1rem;\r\nmargin-top: 1vh;\r\nmargin-left:1vh;\r\n@media(max-width: 700px){\r\n        font-size:0.9rem;\r\n    }\r\n`\r\n\r\n    return(\r\n<Container>        \r\n    <City>{city}</City>\r\n    <Country>{country}</Country>\r\n</Container>\r\n    );\r\n}\r\nexport default Location;","import React from 'react'\r\nimport styled from '@emotion/styled';\r\n\r\nconst Condition = ({temp, condition}) => {\r\n    let tempColor = \"cyan\";\r\n    if(temp<=10){\r\n        tempColor = \"yellow\"\r\n    }\r\n\r\n    const Temp = styled.h1`\r\n    font-family: 'Fira Sans', sans-serif;\r\n    font-size: 2rem;\r\n    font-weight: 200;\r\n    margin-top: -3vh;\r\n    margin-bottom:0;\r\n    color: ${tempColor};\r\n    @media(max-width: 700px){\r\n        font-size:1.4rem;\r\n    }\r\n    `\r\n    const State = styled.h3`\r\n    font-family: \"Merriweather\", sans-serif;\r\n    font-size: 1.2rem;\r\n    margin-top:-2vh;\r\n    padding-top:0vh;\r\n    padding-bottom:30px;\r\n    color:white;\r\n    @media(max-width: 700px){\r\n        font-size:1rem;\r\n    }\r\n    `\r\n\r\n    return(\r\n        <>\r\n            <Temp>{temp} Â°C</Temp>\r\n            <State>{condition}</State>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Condition;","import React from 'react'\r\nimport styled from '@emotion/styled';\r\n\r\nconst Icon = (props) => {\r\n    const Icon = styled.img`\r\n    width: 30%;\r\n    height: 22%;\r\n    margin-bottom:0;\r\n    margin-top:-1vh;\r\n    @media(max-width: 700px){\r\n        margin-top: -2vh;\r\n    }\r\n    `;\r\n\r\n    var icon = '';\r\n    switch(props.condition){\r\n    case \"Clear\":\r\n        icon = `./img/clear.png`;\r\n    break;\r\n    case \"Clouds\":\r\n        icon = `./img/clouds.png`;\r\n    break;\r\n    case \"Drizzle\":\r\n        icon = `./img/drizzle.png`;\r\n    break;\r\n    case \"Mist\":\r\n        icon = `./img/mist.png`;\r\n    break;\r\n    case \"Rain\":\r\n        icon = `./img/rain.png`;\r\n    break;\r\n    case \"Snow\":\r\n        icon = `./img/snow.png`;\r\n    break;\r\n    case \"Haze\":\r\n        icon = `./img/haze.png`;\r\n    break;\r\n    case \"Thunderstorm\":\r\n        icon = `./img/thunder.png`;\r\n    break;\r\n    case \"Windy\":\r\n        icon = `./img/windy.png`;\r\n    break;\r\n    default:\r\n        break;\r\n}\r\n\r\n    return(\r\n        <Icon src={icon} \r\n        alt=\"Weather Icon\"/>\r\n    )\r\n}\r\nexport default Icon;","import React, {Component}  from 'react';\r\nimport \"./Clock.css\"\r\n\r\nclass Time extends Component{\r\n  _isMounted = false;\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      timeZone:this.props.timeZone,\r\n      hours: null,\r\n      minutes: \"Loading...\",\r\n      seconds: null\r\n    }\r\n  }\r\n\r\n  currentTime(){\r\n    const currSeconds = new Date().getSeconds();\r\n    const currMinutes = new Date().getMinutes();\r\n    const currHours = new Date().getHours();\r\n   \r\n      if(currMinutes<10)\r\n        this.setState({minutes: \":0\" + currMinutes})\r\n      else \r\n        this.setState({minutes: \":\" +currMinutes})\r\n      \r\n\r\n      let timeDiff = 0;\r\n      const time = new Date().getHours();\r\n\r\n      switch(this.props.timeZone){\r\n        case 32400: //Japan Time\r\n            if(time >= 0 && time < 8)\r\n              timeDiff = 16\r\n            else \r\n              timeDiff = -8\r\n            break;\r\n        case -21600: //(US/Mountain)\r\n            if(time >= 0 && time < 23)\r\n              timeDiff = 1\r\n            else \r\n              timeDiff = 0\r\n            break;\r\n        case -14400: //(US/Eastern)\r\n            if(time >= 0 && time < 21)\r\n            timeDiff = 3\r\n            else \r\n            timeDiff=-21\r\n            break;\r\n        case -18000: //(US/Central)\r\n            if(time >= 0 && time < 22)\r\n            timeDiff = 2\r\n            else \r\n             timeDiff= -22\r\n            break;\r\n        default://(US/Pacific)\r\n            timeDiff=0;\r\n          break;\r\n      }\r\n      \r\n      if(currHours+timeDiff>12 && currHours<24)\r\n      this.setState({hours: new Date().getHours()+timeDiff-12})\r\n      else\r\n      this.setState({hours: new Date().getHours()+timeDiff})\r\n\r\n      \r\n      if(currHours+timeDiff>=0 && currHours+timeDiff< 12)\r\n      this.setState({seconds: currSeconds+\" am\"})\r\n      else\r\n      this.setState({seconds: currSeconds+\" pm\"})\r\n    }\r\n\r\n     componentDidMount(){\r\n      this._isMounted = true;\r\n\r\n      if(this._isMounted)\r\n        setInterval(()=>this.currentTime(),1000)\r\n  \r\n      }\r\n    componentWillUnmount() {\r\n      this._isMounted = false;\r\n    }\r\n\r\n   render(){\r\n      return(\r\n        <div className=\"App-clock\">\r\n          <div>\r\n          {this.state.hours}{this.state.minutes}\r\n          </div>\r\n          <div className=\"seconds\">\r\n          {this.state.seconds}\r\n          </div>\r\n        </div>\r\n      );\r\n   }\r\n  }\r\n\r\n  export default Time\r\n\r\n","import React from 'react'\r\nimport styled from '@emotion/styled';\r\n\r\nimport Location from './Location'\r\nimport Condition from './Condition'\r\nimport Icon from './Icon'\r\nimport Time from './Time';\r\nimport \"./Clock.css\"\r\n\r\nconst WeatherCard= ({temp, condition, city, country, timeZone, name}) => {\r\n    \r\n\r\n    let highColor = 0;\r\n    let lowColor = 0;\r\n    let bg = null;\r\n    if(temp > 10){ //hot weather\r\n    highColor = (1-(temp-10)/28)*255;\r\n    lowColor = highColor - 150;\r\n    bg = `linear-gradient(to top, \r\n        rgba(255,${highColor},0), \r\n        rgba(200,${lowColor},0)\r\n        )`;\r\n    } else if (temp <= 10){ //cold weather\r\n        highColor = (1-(temp+20)/32)*255;\r\n        lowColor= highColor - 150;\r\n        bg = `linear-gradient(to top, \r\n            rgba(0,${highColor},255), \r\n            rgba(0,${lowColor},255)\r\n            )`;\r\n    }\r\n    const Card = styled.div`\r\n    margin: 0 auto;\r\n    background: ${bg};\r\n    width: 280px;\r\n    height: 330px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    border-radius: 15px;\r\n    margin-top:25px;\r\n    margin-bottom:25px;\r\n    margin-left:1px;\r\n    margin-right:1px;\r\n    @media(max-width: 700px){\r\n        width:200px;\r\n        height:280px;\r\n    }\r\n    `\r\n    const Title = styled.div`\r\n    border-style: solid;\r\n    color: black;\r\n    width:200px;\r\n    text-align: center;\r\n    font-size:3vh;\r\n    font-weight: bold;\r\n    font-family: Times New Roman;\r\n    background: linear-gradient(to left,white,deepskyblue,white,deepskyblue);\r\n    border-radius:30px;\r\n    margin-top:2px;\r\n    @media(max-width: 700px){\r\n        width:150px;\r\n    }\r\n    `\r\n\r\n    return (\r\n        <div className=\"cardTime\">\r\n        <Card className=\"card\">\r\n            <Title>{name}</Title>\r\n            <Location city = {city} country={country}/>\r\n             <Icon condition = {condition}/>\r\n            <Condition temp={temp} condition={condition}/>\r\n        </Card>\r\n        <Time timeZone={timeZone}/>\r\n        </div>\r\n    );\r\n}\r\nexport default WeatherCard;","import React, {useState, useEffect} from 'react';\r\nimport WeatherCard from './WeatherCard/component';\r\n\r\n\r\nconst WeatherEngine = ({location, name}) => {\r\n\r\nconst[weather, setWeather] = useState({\r\n    temp: null,\r\n    city: null,\r\n    condition: null,\r\n    country: null,\r\n    timeZone: null\r\n});\r\n\r\nconst getWeather = async(q)=>{\r\n\r\n  const apiRes = await fetch(\r\n    `https://api.openweathermap.org/data/2.5/weather?q=${q}&appid=62a9294025f4bd4ff8dee879a50f9b58&units=metric`\r\n   );\r\n   const resJSON = await apiRes.json();\r\n   setWeather({\r\n     temp: resJSON.main.temp,\r\n     city: resJSON.name,\r\n     condition: resJSON.weather[0].main,\r\n     country: resJSON.sys.country,\r\n     timeZone: resJSON.timezone\r\n   });\r\n  }\r\n\r\nuseEffect(()=>{\r\n  getWeather(location);\r\n} ,[location]);\r\n\r\n  return (\r\n    <div>\r\n      <WeatherCard \r\n          name={name}\r\n          temp={weather.temp} \r\n          condition = {weather.condition} \r\n          city={weather.city} \r\n          country={weather.country}\r\n          timeZone={weather.timeZone}\r\n          />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default WeatherEngine;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport WeatherEngine from './components/WeatherEngine';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <div className=\"one\">\r\n        <WeatherEngine location=\"Tokyo\" name =\"Kaede\"/>\r\n        <WeatherEngine location=\"Calgary\" name =\"Kiyono\"/>\r\n        <WeatherEngine location=\"Redondo Beach\" name =\"Gary\"/>\r\n\r\n        <WeatherEngine location=\"Vancouver\" name =\"Tak\"/>\r\n        <WeatherEngine location=\"Santa Cruz, US\" name =\"Hiro\"/>\r\n        <WeatherEngine location=\"Yachio\" name =\"Yasuko\"/>\r\n \r\n        <WeatherEngine location=\"Tottori, jp\" name =\"Kei\"/>\r\n        <WeatherEngine location=\"Yachio\" name =\"Atsushi\"/>\r\n        <WeatherEngine location=\"Saitama, jp\" name =\"Yuko\"/>\r\n\r\n        <WeatherEngine location=\"Winnipeg\" name =\"Les\"/>\r\n        <WeatherEngine location=\"Seattle\" name =\"Taylor\"/>\r\n        <WeatherEngine location=\"Regina, ca\" name =\"Brandon\"/>\r\n\r\n        <WeatherEngine location=\"Ottawa\" name =\"Erin\"/>\r\n        <WeatherEngine location=\"Winnipeg\" name =\"Tim\"/>\r\n        <WeatherEngine location=\"Winnipeg\" name =\"Corrine\"/>\r\n\r\n        <WeatherEngine location=\"Winnipeg\" name =\"Darian\"/>\r\n        <WeatherEngine location=\"Winnipeg\" name =\"Jordy\"/>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"antd/dist/antd.css\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}